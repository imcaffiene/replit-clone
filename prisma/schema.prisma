generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  PREMIUM_USER
}

enum Templates {
  REACTJS
  NEXTJS
  VUE
  EXPRESS
  HONO
  ANGULAR
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  image         String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  emailVerified DateTime? @map("email_verified")

  accounts           Account[]
  myPlaygrounds      Playground[] @relation("UserPlaygrounds")
  starredPlaygrounds Starmark[]   @relation("UserStarmarks")

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @map("refresh_token")
  access_token      String? @map("access_token")
  expires_at        Int?    @map("expires_at")
  token_type        String? @map("token_type")
  scope             String?
  id_token          String? @map("id_token")
  session_state     Json?   @map("session_state")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId], name: "provider_providerAccountId")
  @@index([userId])
  @@map("accounts")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model TemplateFile {
  id           String @id @default(cuid())
  filename     String
  content      String // This stores the JSON content
  playgroundId String @unique @map("playground_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  playground Playground @relation(fields: [playgroundId], references: [id], onDelete: Cascade)

  @@map("template_files")
}

model Playground {
  id          String    @id @default(cuid())
  title       String
  description String?
  template    Templates @default(REACTJS)
  userId      String    @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user      User       @relation("UserPlaygrounds", fields: [userId], references: [id], onDelete: Cascade)
  starmarks Starmark[] @relation("PlaygroundStarmarks")

  templateFiles TemplateFile[]

  @@index([userId])
  @@map("playgrounds")
}

model Starmark {
  id           String  @id @default(cuid())
  userId       String  @map("user_id")
  playgroundId String  @map("playground_id")
  isMarked     Boolean @default(true)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user       User       @relation("UserStarmarks", fields: [userId], references: [id], onDelete: Cascade)
  playground Playground @relation("PlaygroundStarmarks", fields: [playgroundId], references: [id], onDelete: Cascade)

  @@unique([userId, playgroundId])
  @@index([userId])
  @@index([playgroundId])
  @@map("starmarks")
}
